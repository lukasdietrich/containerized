# Default values for paperless-ngx.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/paperless-ngx/paperless-ngx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 1000

# Rootless does not work after 2.15.3.
# See https://github.com/paperless-ngx/paperless-ngx/issues/9907
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /api/
    port: http
readinessProbe:
  httpGet:
    path: /api/
    port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

persistence:
  data:
    enabled: false
    existingClaimName: ""
    claim:
      # storageClassName: manual
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  media:
    enabled: false
    existingClaimName: ""
    claim:
      # storageClassName: manual
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
  consume:
    enabled: false
    existingClaimName: ""
    claim:
      # storageClassName: manual
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

# See https://docs.paperless-ngx.com/configuration/
paperless:
  # PAPERLESS_TIME_ZONE
  timezone: Europe/Berlin

  database:
    # PAPERLESS_DBENGINE
    engine: postgresql
    # PAPERLESS_DBHOST
    host: paperless-postgresql
    # PAPERLESS_DBPORT
    port: 5432
    # PAPERLESS_DBNAME
    name: paperless
    credentials:
      # PAPERLESS_DBUSER
      username: paperless
      # PAPERLESS_DBPASS
      password: hunter2

  redis:
    # PAPERLESS_REDIS
    url: redis://localhost:6379/0

  login:
    regular:
      # PAPERLESS_DISABLE_REGULAR_LOGIN
      enabled: true

    # PAPERLESS_SOCIALACCOUNT_PROVIDERS
    oauth2:
      enabled: false

      # PAPERLESS_REDIRECT_LOGIN_TO_SSO
      redirect: true

      provider:
        id: oauth2-provider
        name: My OAuth2 Provider

      client:
        id: ""
        secret: ""

      issuer:
        url: https://oauth2.example.org

  ocr:
    # PAPERLESS_OCR_LANGUAGE
    language: deu+eng

    # PAPERLESS_OCR_MODE
    mode: skip

    # PAPERLESS_OCR_CLEAN
    clean: clean

  cron:
    # PAPERLESS_EMAIL_TASK_CRON
    email: "*/10 * * * *"
    # PAPERLESS_TRAIN_TASK_CRON
    train: "5 */1 * * *"
    # PAPERLESS_INDEX_TASK_CRON
    index: "0 0 * * *"
    # PAPERLESS_SANITY_TASK_CRON
    sanity: "30 0 * * SUN"

  consumer:
    # PAPERLESS_CONSUMER_DISABLE
    enabled: false
