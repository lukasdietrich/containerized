name: Release

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'

permissions:
  packages: write

env:
  REGISTRY_BASE_URL: ghcr.io/lukasdietrich/containerized

jobs:
  list:
    name: List
    runs-on: ubuntu-latest
    outputs:
      applications: ${{ steps.applications.outputs.applications }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: List applications having an `upstream.json`
        id: applications
        run: |
          APPLICATIONS="$(find * -name upstream.json -printf "%h\n" | sort | jq -Rnc '[inputs]')"
          echo "applications=${APPLICATIONS}" >> "${GITHUB_OUTPUT}"

  release:
    needs: list

    strategy:
      matrix:
        application: ${{ fromJSON(needs.list.outputs.applications) }}

    name: Release ${{ matrix.application }}
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ${{ matrix.application }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      ##################################################################################################################
      ## Lookup application upstream version
      ##
      - name: Lookup upstream version for ${{ matrix.application }}
        id: upstream
        run: |
          VERSION="$(jq -rj .version upstream.json)"
          TAG="$(echo ${VERSION} | sed -r 's/^v?(.*)$/v\1/')"

          echo "version=${VERSION}" >> "${GITHUB_OUTPUT}"
          echo "tag=${TAG}" >> "${GITHUB_OUTPUT}"

      ##################################################################################################################
      ## Container Image
      ##
      - name: Check if a container image for ${{ steps.upstream.outputs.version }} exists
        id: check-container
        run: |
          LOCAL="$(test -f Containerfile ; echo $?)"
          echo "local=${LOCAL}" >> "${GITHUB_OUTPUT}"

          if [ "${LOCAL}" -eq "0" ]; then
            URL="${REGISTRY_BASE_URL}/${{ matrix.application }}:${{ steps.upstream.outputs.tag }}"
            REGISTRY="$(skopeo inspect --raw "docker://${URL}" &>/dev/null ; echo $?)"

            echo "url=${URL}" >> "${GITHUB_OUTPUT}"
            echo "registry=${REGISTRY}" >> "${GITHUB_OUTPUT}"
          fi

      - if: ${{ steps.check-container.outputs.local == '0' && steps.check-container.outputs.registry != '0' }}
        name: Build container image
        id: build-container
        uses: redhat-actions/buildah-build@v2
        with:
          oci: true
          context: ./${{ matrix.application }}
          containerfiles: ./${{ matrix.application }}/Containerfile
          tags: ${{ steps.check-container.outputs.url }}
          build-args: VERSION=${{ steps.upstream.outputs.version }}

      - if: ${{ steps.check-container.outputs.local == '0' && steps.check-container.outputs.registry != '0' }}
        name: Publish container image
        uses: redhat-actions/push-to-registry@v2
        with:
          tags: ${{ steps.build-container.outputs.tags }}
          registry: ghcr.io/${{ github.repository_owner }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      ##################################################################################################################
      ## Helm Chart
      ##
      - name: Check if a helm chart for ${{ steps.upstream.outputs.version }} exists
        id: check-helm
        run: |
          LOCAL="$(test -d chart ; echo $?)"
          echo "local=${LOCAL}" >> "${GITHUB_OUTPUT}"

          if [ "${LOCAL}" -eq "0" ]; then
            NAME="$(yq .name chart/Chart.yaml)"
            URL="${REGISTRY_BASE_URL}/chart/${NAME}:${{ steps.upstream.outputs.tag }}"
            REGISTRY="$(skopeo inspect --raw "docker://${URL}" &>/dev/null ; echo $?)"

            echo "name=${NAME}" >> "${GITHUB_OUTPUT}"
            echo "url=${URL}" >> "${GITHUB_OUTPUT}"
            echo "registry=${REGISTRY}" >> "${GITHUB_OUTPUT}"
          fi

      - if: ${{ steps.check-helm.outputs.local == '0' && steps.check-helm.outputs.registry != '0' }}
        name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io/${{ github.repository_owner }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - if: ${{ steps.check-helm.outputs.local == '0' && steps.check-helm.outputs.registry != '0' }}
        name: Publish helm chart
        run: |
          VERSION=${{ steps.upstream.outputs.tag }}

          helm package chart --version ${VERSION} --app-version ${VERSION}
          helm push ${{ steps.check-helm.outputs.name }}-${VERSION}.tgz oci://${REGISTRY_BASE_URL}
